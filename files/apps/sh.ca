async function main(bcwd, _){
    let win, el = document.createElement('div');

    let cr = document.createElement('pre');
    let ci = document.createElement('input');
    el.append(cr, '> ', ci);

    win = await bcwd.window.open({
        title: 'Командная строка',
        elem: el,
        width: 400,
        height: 300,
        resizable: false,
        onclose: ()=>exit()
    });

    el.style.backgroundColor = 'black';
    el.style.color = 'white';
    el.style.height = '100%';
    el.style.overflow = 'auto';

    cr.innerText = 'BCWD Shell 0.1\n';
    cr.style.font = '1em Consolas, monospace';
    cr.style.color = 'white';
    cr.style.backgroundColor = 'black';
    cr.style.margin = '0';
    cr.style.padding = '0';

    ci.type = 'text';
    ci.style.font = '1em Consolas, monospace';
    ci.style.border = 'none';
    ci.style.outline = 'none';
    ci.style.color = 'white';
    ci.style.backgroundColor = 'black';
    ci.style.width = '90%';

    el.addEventListener('click', ()=>{
        ci.focus();
    });

    ci.focus();

    ci.addEventListener('keydown', async e=>{
        if(e.key == 'Enter'){
            cprint('\n> '+ci.value);
            cprint((await runCmd(ci.value))??'');
            ci.value = '';
            ci.focus();
            el.scrollBy(0, 99999);
        }
    });

    let commands = {
        'echo': args=>args.join(' '),
        'print': args=>cprint(args.join(' ')),
        'clear': _=>cr.innerText = '',
        'help': _=>helpMessage(),
        'set': args=>variables[args[0]] = args[1],
        'js': args=>eval(args.join(' ')),
        'reboot': _=>location.reload(),
        'cl_args': args=>console.log(args),
        'exec': async args=>await bcwd.shell.execCommand({fileName: args[0], args: args.slice(1)}),
        'fread': async args=>await bcwd.fs.file.read(args[0]),
        'fwrite': async args=>await bcwd.fs.file.write(args[0], args[1]),
        'fexec': async args=>await bcwd.fs.file.exec(args[0], args.slice(1)),
        'fdelete': async args=>await bcwd.fs.file.delete(args[0]),
        'dcreate': async args=>await bcwd.fs.dir.create(args[0]),
        'ddelete': async args=>await bcwd.fs.dir.delete(args[0]),
        'dlist': async args=>(await bcwd.fs.dir.list(args[0], !!args[1], !!args[2])).join('\n')
    }

    let variables = {};

    async function runCmd(cmd){
        if(cmd.trim().length == 0) return;

        cmd = cmd.replace(/"([^"]+)"/g, (_, p1)=>{
            return p1.replaceAll("'", '$Q1').replaceAll(' ', '$SP');
        });

        cmd = cmd.replace(/'([^']+)'/g, (_, p1)=>{
            return p1.replaceAll('"', '$Q2').replaceAll(' ', '$SP');
        });

        let rc = cmd.split(' ');
        let c = rc[0], args = rc.slice(1);

        await bcwd.util.forEachAsync(args, async (arg,i,o)=>{
            arg = arg.replaceAll('$Q1', "'").replaceAll('$Q2', '"').replaceAll('$SP', ' ');

            if(arg.startsWith('~')){
                o[i] = arg.slice(1);
                return;
            }

            arg = arg.replace(/@([a-zA-Z0-9_\.]+)/g, (_, p1)=>{
                return variables[p1];
            });

            arg = arg.replace(/@\{(.+)\}/g, (_, p1)=>{
                return variables[p1];
            });

            arg = await replaceAsync(arg, /&\{(.+)\}/g, async (_, p1)=>{
                return await runCmd(p1)??'';
            });

            arg = arg.replace(/\$\{(.+)\}/g, (_, p1)=>{
                return eval(p1)??'';
            });

            o[i] = arg;
        });

        if(commands[c]){
            try{
                return await commands[c](args)??'';
            }catch(e){
                return 'ОШИБКА: '+e;
            }
        }else{
            if(await bcwd.fs.file.exists(`/apps/${c}.ca`)){
                try{
                    return await bcwd.shell.execCommand({
                        fileName: `/apps/${c}.ca`,
                        args: args
                    });
                }catch(e){
                    return 'ОШИБКА: '+e;
                }
            }else{
                return `ОШИБКА: Команда "${c}" не найдена`
            }
        }
    }

    async function replaceAsync(str, regex, func){
        let m = str.match(regex);
        if(!m) return str;
        return str.replace(regex, await func(m, m[1]));
    }

    function cprint(txt){
        cr.innerText += txt+'\n';
    }

    function exitShell(){
        window.onclick = null;
        document.body.innerHTML = '<div id="desktop"><div id="windows"></div></div>';
        function lnm(i){
            let m = MODULES[i];
            bcwd.ll.loadModule(m, ()=>{
                if(i+1 < MODULES.length){
                    lnm(i+1);
                }else{
                    if(!localStorage.BCWD_INIT_FUNCTION) localStorage.BCWD_INIT_FUNCTION = 'init';
                    window[localStorage.BCWD_INIT_FUNCTION]();
                }
            }, null);
        }
        lnm(0);
    }

    function helpMessage(){
        cprint('BCWD Shell 0.1\n\n\
        help                                 справка\n\
        set <переменная> <значение>          установить значение переменной\n\
        echo <текст>                         вернуть текст\n\
        print <текст>                        вывести текст\n\
        clear                                очистить консоль\n\
        exit                                 выйти из llshell\n\
        reboot                               перезагрузка\n\
        js <код>                             выполнить код\n\
        load_module <модуль>                 загрузить модуль\n\
        load_modules <модули>                загрузить несколько модулей\n\
        get_param <параметр>                 вывести значение параметра LS\n\
        set_param <параметр> <значение>      изменить значение параметра LS\n\
        list_params                          вывести список всех параметров LS');
    }
}